syntax = "proto3";

package zitadel.settings.custom.v1;
option go_package = "github.com/zitadel/zitadel/pkg/grpc/settings/custom/v1;custom";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "zitadel/settings/custom/v1/custom.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Custom Settings Service";
    version: "1.0";
    description: "This API is intended to manage custom settings for ZITADEL. It can be enabled using the feature flag \"multitenancy_settings\". Custom settings are inherited through the context hierarchy system -> instance -> org. They can be used for multi tenancy use cases that ZITADEL does not cover out of the box. Custom settings are especially useful together with the session API or with actions.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";
  consumes: "application/grpc-web+proto";

  produces: "application/json";
  produces: "application/grpc";
  produces: "application/grpc-web+proto";

  host: "$ZITADEL_DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$ZITADEL_DOMAIN/oauth/v2/authorize";
        token_url: "$ZITADEL_DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the settings in the given context.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

// CustomSettingsService is intended to manage custom settings for ZITADEL.
// It can be enabled using the feature flag \"multitenancy_settings\".
//
// Custom settings are inherited through the context hierarchy system -> instance -> org.
// They can be used for multi tenancy use cases that ZITADEL does not cover out of the box.
// Custom settings are especially useful together with the session API or with actions.
service CustomSettingsService {
  rpc Set (SetCustomSettingsRequest) returns (SetCustomSettingsResponse) {
    option (google.api.http) = {
      patch: "/settings/v1/custom"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Set custom settings for a given context";
      description: "Set custom key-value pairs for a given context. Only fields present in the request are set or unset."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  };

  rpc Get (GetCustomSettingsRequest) returns (GetCustomSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v1/custom"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the custom settings in the given context";
      description: "Returns all configured and inherited custom settings for the given context."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  };
}
