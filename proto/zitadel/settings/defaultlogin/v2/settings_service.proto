syntax = "proto3";

package zitadel.settings.defaultlogin.v2;
option go_package = "github.com/zitadel/zitadel/pkg/grpc/settings/defaultlogin/v2;defaultlogin";

import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/object/v2/object.proto";
import "zitadel/settings/defaultlogin/v2/branding_settings.proto";
import "zitadel/settings/defaultlogin/v2/domain_settings.proto";
import "zitadel/settings/defaultlogin/v2/legal_settings.proto";
import "zitadel/settings/defaultlogin/v2/lockout_settings.proto";
import "zitadel/settings/defaultlogin/v2/login_settings.proto";
import "zitadel/settings/defaultlogin/v2/password_settings.proto";
import "zitadel/settings/defaultlogin/v2/security_settings.proto";
import "zitadel/settings/defaultlogin/v2/general_settings.proto";
import "zitadel/settings/defaultlogin/v2/label_settings.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Default Login UI Settings Service";
    version: "2.0";
    description: "This API is intended to manage settings for ZITADELs default login UI. It can be enabled using the feature flag \"multitenancy_settings\". Like all settings, default login UI settings are inherited through the context hierarchy system -> instance -> org.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$ZITADEL_DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$ZITADEL_DOMAIN/oauth/v2/authorize";
        token_url: "$ZITADEL_DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service DefaultLoginUISettingsService {
  // Get basic information about the instance
  rpc GetGeneralSettings (GetGeneralSettingsRequest) returns (GetGeneralSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/general"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get basic information over the instance";
      description: "Return the basic information of the instance for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the login settings
  rpc GetLoginSettings (GetLoginSettingsRequest) returns (GetLoginSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/login"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the login settings";
      description: "Return the settings for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the password complexity settings
  rpc GetPasswordComplexitySettings (GetPasswordComplexitySettingsRequest) returns (GetPasswordComplexitySettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/password/complexity"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the password complexity settings";
      description: "Return the password complexity settings for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the current active branding settings
  rpc GetBrandingSettings (GetBrandingSettingsRequest) returns (GetBrandingSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/branding"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the current active branding settings";
      description: "Return the current active branding settings for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the domain settings
  rpc GetDomainSettings (GetDomainSettingsRequest) returns (GetDomainSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/domain"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the domain settings";
      description: "Return the domain settings for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the legal and support settings
  rpc GetLegalAndSupportSettings (GetLegalAndSupportSettingsRequest) returns (GetLegalAndSupportSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/legal_support"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the legal and support settings";
      description: "Return the legal settings for the requested context"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the lockout settings
  rpc GetLockoutSettings (GetLockoutSettingsRequest) returns (GetLockoutSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/lockout"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get the lockout settings";
      description: "Return the lockout settings for the requested context, which define when a user will be locked"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  // Get the security settings
  rpc GetSecuritySettings(GetSecuritySettingsRequest) returns (GetSecuritySettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/security";
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Settings";
      summary: "Get Security Settings";
      description: "Returns the security settings of the ZITADEL instance."
    };
  }
  // Set the security settings
  rpc SetSecuritySettings(SetSecuritySettingsRequest) returns (SetSecuritySettingsResponse) {
    option (google.api.http) = {
      patch: "/settings/v2/security";
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Settings";
      summary: "Set Security Settings";
      description: "Set the security settings of the ZITADEL instance."
    };
  }
  // Get the label settings
  rpc GetLabelSettings(GetLabelSettingsRequest) returns (GetLabelSettingsResponse) {
    option (google.api.http) = {
      get: "/settings/v2/label";
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Settings";
      summary: "Get Label Settings";
      description: "Returns the labels for the default login UI."
    };
  }
  // Set the label settings
  rpc SetLabelSettings(SetLabelSettingsRequest) returns (SetLabelSettingsResponse) {
    option (google.api.http) = {
      patch: "/settings/v2/label";
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Settings";
      summary: "Set Label Settings";
      description: "Set the labels for the default login UI."
    };
  }
}

message GetLoginSettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetLoginSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetLoginSettings settings = 2;
}

message GetPasswordComplexitySettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetPasswordComplexitySettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetPasswordComplexitySettings settings = 2;
}

message GetBrandingSettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetBrandingSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetBrandingSettings settings = 2;
}

message GetDomainSettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetDomainSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetDomainSettings settings = 2;
}

message GetLegalAndSupportSettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetLegalAndSupportSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetLegalAndSupportSettings settings = 2;
}

message GetLockoutSettingsRequest {
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetLockoutSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetLockoutSettings settings = 2;
}

message GetGeneralSettingsRequest {
  // Only System and Instance Contexts are allowed
  zitadel.object.v2.RequestContext ctx = 1;
  zitadel.settings.defaultlogin.v2.GetGeneralSettings settings = 2;
}

message GetGeneralSettingsResponse {
  zitadel.object.v2.Details details = 1;
  zitadel.settings.defaultlogin.v2.GetLockoutSettings settings = 2;
}

message GetSecuritySettingsRequest{
  // Only System and Instance Contexts are allowed
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetSecuritySettingsResponse{
  zitadel.object.v2.Details details = 1;
  GetSecuritySettings settings = 2;
}

message SetSecuritySettingsRequest{
  // Only System and Instance Contexts are allowed
  zitadel.object.v2.RequestContext ctx = 1;
  SetSecuritySettings settings = 2;
}

message SetSecuritySettingsResponse{
  zitadel.object.v2.Details details = 1;
}

message GetLabelSettingsRequest{
  // Only System and Instance Contexts are allowed
  zitadel.object.v2.RequestContext ctx = 1;
}

message GetLabelSettingsResponse{
  zitadel.object.v2.Details details = 1;
  GetLabelSettings settings = 2;
}

message SetLabelSettingsRequest{
  // Only System and Instance Contexts are allowed
  zitadel.object.v2.RequestContext ctx = 1;
  SetLabelSettings settings = 2;
}

message SetLabelSettingsResponse{
  zitadel.object.v2.Details details = 1;
}