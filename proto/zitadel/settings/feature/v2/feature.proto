syntax = "proto3";

package zitadel.settings.feature.v2;
option go_package = "github.com/zitadel/zitadel/pkg/grpc/settings/feature/v2;feature";

import "validate/validate.proto";
import "zitadel/object/v2/object.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message SetFeaturesRequest{
  optional zitadel.object.v2.RequestContext context = 1;

  optional SetFeature login_default_org = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "The login UI will use the settings of the default org (and not from the instance) if no organization context is set";
    }
  ];
  optional SetFeature oidc_trigger_introspection_projections = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.";
    }
  ];
  optional SetFeature oidc_legacy_introspection = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.";
    }
  ];

  optional SetFeature user_schema = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.";
    }
  ];

  optional SetFeature oidc_token_exchange = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.";
    }
  ];
  optional SetFeature actions = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.";
    }
  ];
}

message SetFeaturesResponse {
  zitadel.object.v2.Details details = 1;
}

message GetFeaturesRequest {
  optional zitadel.object.v2.RequestContext context = 1;
}

message GetFeaturesResponse {
  zitadel.object.v2.Details details = 1;
  ResolvedFeature login_default_org = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "The login UI will use the settings of the default org (and not from the instance) if no organization context is set";
    }
  ];

  ResolvedFeature oidc_trigger_introspection_projections = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.";
    }
  ];

  ResolvedFeature oidc_legacy_introspection = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.";
    }
  ];

  ResolvedFeature user_schema = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.";
    }
  ];

  ResolvedFeature oidc_token_exchange = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.";
    }
  ];

  ResolvedFeature actions = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "true";
      description: "Actions v2 allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.";
    }
  ];
}

message ResolvedFeature {
  bool enabled = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "false";
      description: "Whether a feature is enabled.";
    }
  ];

  zitadel.object.v2.ResourceOwnerType resource_owner_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The resource owner type where the setting of the feature was defined. The resource owner type may be the resource itself or a resource owner through inheritance.";
    }
  ];
}

message SetFeature {
  oneof state {
    bool enabled = 1;
    bool inherited = 2 [(validate.rules).bool = {const: true}];
  }
}