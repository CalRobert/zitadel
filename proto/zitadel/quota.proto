syntax = "proto3";

import "zitadel/object.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package zitadel.quota.v1;

option go_package ="github.com/zitadel/zitadel/pkg/grpc/quota";

message Quota {
    string id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"69629023906488334\"";
        }
    ];
    zitadel.v1.ObjectDetails details = 2;
    Unit unit = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the unit ZITADEL should measure";
        }
    ];
    google.protobuf.Timestamp from = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"2019-04-01T08:45:00.000000Z\"";
            description: "the first intervals start timestamp";
        }
    ];
    google.protobuf.Duration interval = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the quotas repeated time window after which ZITADEL resets the measurement";
        }
    ];
    uint64 amount = 6 [
       (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the count limit after which ZITADEL enforces the quotas actions";
       }
    ];
    Limitations limitations = 7 [
       (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the actions ZITADEL enforces when the quotas limit was exceeded";
       }
    ];
    repeated Notification notifications = 8 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the handlers, ZITADEL executes when certain quota percentages are reached";
       }
    ];
}

enum Unit {
    UNIT_REQUESTS_ALL_AUTHENTICATED = 0;
    UNIT_ACTIONS_ALL_RUNS_SECONDS = 1;
}

message Limitations {
    Block block = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "makes ZITADEL prevent the quotas unit to increment after the quotas amount is reached";
        }
    ];
    string cookie_value = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "makes ZITADEL send a SetCookie header field containting this value for all requests except to the system API after the quota is reached";
        }
    ];
    string redirect_url = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "makes ZITADEL redirect requests to this URL for all requests to ZITADEL except to the system API after the quota is reached";
        }
    ];
}

message Block {
    string message = 1;
    uint32 http_status = 2;
    uint32 grpc_status = 3;
}

message Notification {
    uint32 percent = 1;
    bool repeat = 2;
    string call_url = 3;
}
